================
0-add_integer.py
================

The module defines the functions to add two integers.

Usage
======

``add_integer()``
This function returns the sum of two values passed to it as arguments.

:: TEST_0 POSITIVE AND POSITIVE

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(4, 6)
10

::

TEST_1 POSITIVE AND NEGATIVE

>>> add_integer(3, -4)
-1

::

TEST_2 NEGATIVE AND NEGATIVE

>>> add_integer(-3, -9)
-12

::

TEST_3 FLOATING NUMBERS

``Floats should be casted to int before the addition.

>>> add_integer(2.0, 3.0)
5

::

TEST_4 COMBINED FLOATING NUMBERS

>>> add_integer(4.5, 6)
10

::

TEST_5 TEST FOR ZERO

>>> add_integer(0, 5)
5
::

>>> add_integer("david", "tony")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "0-add_integer.py", line 10, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer

Non_numbers
===========

::

TEST_0 int and a string

>>> add_integer(2, 'david')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "0-add_integer.py", line 10, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer

::

TEST_1 string and int

>>> add_integer('david', 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "0-add_integer.py", line 10, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer

::

TEST_2 NO arguments

>>> add_integer()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: add_integer() missing 2 required positional arguments: 'a' and 'b'